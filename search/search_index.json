{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Desktop Software/","text":"Desktop software manual will be here.","title":"Desktop Software"},{"location":"Developers/Javascript Client Examples/","text":"JavaScript Client Examples \uf0c1 Loading Flight Plan Using JavaScript \uf0c1 Used Code \uf0c1 <div id='example'> <div id='example_button'> </div> </div> let plan = { 'callsign': 'THYTST', 'departure': 'LTBA', 'destination': 'LTFM', 'route': 'LTBA LTFM' } let planOptions = { 'buttons': [ { to: 'example_button', text: 'Load Plan' } ] } let planClient = new fsfpl.Plan(plan, planOptions) Result \uf0c1 Button on this div is automatically generated with given options. Clicking it will load the flight in the example code. let plan = { 'callsign': 'THYTST', 'departure': 'LTBA', 'destination': 'LTFM', 'route': 'LTBA LTFM' } let planOptions = { 'buttons': [ { to: 'example_button', text: 'Load Plan' } ] } let planClient = new fsfpl.Plan(plan, planOptions) // planClient.send() Pulling Data from Existing DOM Structure \uf0c1 Turkish Virtual Departures Page \uf0c1 Using FSFPLink.collector we can pull data from DOM. Used Code \uf0c1 const link = new fsfpl.FSFPLink() function collectTv() { return new Promise((resolve, reject) => { /* * This is the important part. Rest is async mumbo jumbo */ link.collect({ 'route': { selector: '#route1', attribute: 'innerHTML' }, 'flight_code': { selector: '#flcode', attribute: 'innerHTML' }, 'departure': { selector: '#departure', attribute: 'innerHTML' }, 'destination': { selector: '#destination', attribute: 'innerHTML' }, 'alternate': { selector: '#alternate', attribute: 'innerHTML' }, 'callsign': { selector: '#callsign', attribute: 'innerHTML' }, 'block_time': { selector: '#time', attribute: 'innerHTML' }, 'aircraft': { selector: 'input[name=\"aircraft\"]:checked', attribute: 'value' }, 'cruise_altitude': { selector: 'input[name=\"cruise-altitude\"]:checked', attribute: 'value' } }).then(result => { document.getElementById('test-1-result').innerHTML = JSON.stringify(result, null, 2) console.log(result) resolve(result) /* * We would normally call 'send' here with result. * link.send(result) * * I am returning a promise instead for example purposes. */ }) /* * End of async mumbo jumbo */ }) } function sendTv(caller) { let options = { caller: caller } collectTv().then(result => { link.send(result, options) }) } Example DOM \uf0c1 Following HTML example is a copy of Turkish Virtual's Departure Page. Turkish Virtual Dispatch Service LTFM - ISTANBUL NEW AIRPORT / UKDE - MOKRAYA METAR and TAF Information Departure : LTFM - ISTANBUL NEW AIRPORT (Click to see airport details) METAR LTFM 142050Z 24010KT 9999 SCT035 BKN100 17/05 Q1012 NOSIG TAF No TAF available for LTFM. Please check PILOT CENTRE for Charts and Sceneries Destination : UKDE - MOKRAYA (Click to see airport details) METAR UKDE 141500Z 16006MPS 120V210 CAVOK 17/M00 Q1006 R20L/090070 NOSIG TAF 2019/12/20 16:09 TAF AMD TAF AMD UKDE 201606Z 2016/2124 09003MPS 0100 FZFG VV001 TXM01/2016Z TNM03/2124Z TEMPO 2018/2021 1000 BR OVC003 Please check PILOT CENTRE for Charts and Sceneries Alternate : UKOH - KHERSON INTL (Click to see airport details) METAR TAF No TAF available for UKOH. Please check PILOT CENTRE for Charts and Sceneries ROUTE INFORMATION Route 1 : MAKOL N617 OSDOR L743 KOSAK Y179 RAPUL L140 KH N604 DITIX Route 2 : Not Available Route of The Destination Turkish Virtual \u2022 Information Services (This is a Scheduled Flight) OTHER INFORMATION Flight Code THY 1469 Callsign THY 2RD Aircraft A319 A320 Flight Levels FL330 FL350 Distance 498 nm Flight Time 1:40 Flight Type International Flight Ticket Price 1400 Departure Time 1140 (z) Please check PILOT CENTRE for Charts and Sceneries Not for real aviation ! .radio-toolbar input[type=\"radio\"] { display: none; } .radio-toolbar label { display: inline-block; background-color: #ddd; padding: 4px 11px; font-family: Arial; font-size: 16px; cursor: pointer; } .radio-toolbar input[type=\"radio\"]:checked+label { background-color: #bbb; } Result \uf0c1 Collect Send const link = new fsfpl.Utility() function collectTv() { return new Promise((resolve, reject) => { /* * This is the important part. Rest is async mumbo jumbo */ link.collect({ 'route': { selector: '#route1', attribute: 'innerHTML' }, 'flight_code': { selector: '#flcode', attribute: 'innerHTML' }, 'departure': { selector: '#departure', attribute: 'innerHTML' }, 'destination': { selector: '#destination', attribute: 'innerHTML' }, 'alternate': { selector: '#alternate', attribute: 'innerHTML' }, 'callsign': { selector: '#callsign', attribute: 'innerHTML' }, 'block_time': { selector: '#time', attribute: 'innerHTML' }, 'aircraft': { selector: 'input[name=\"aircraft\"]:checked', attribute: 'value' }, 'cruise_altitude': { selector: 'input[name=\"cruise-altitude\"]:checked', attribute: 'value' } }).then(result => { document.getElementById('test-1-result').innerHTML = JSON.stringify(result, null, 2) console.log(result) resolve(result) /* * We would normally call 'send' here with result. * link.send(result) * * I am returning a promise instead for example purposes. */ }) /* * End of async mumbo jumbo */ }) } function sendTv(caller) { let options = { caller: caller } collectTv().then(result => { link.send(result, options) }) }","title":"Javascript Client Examples"},{"location":"Developers/Javascript Client Examples/#javascript-client-examples","text":"","title":"JavaScript Client Examples"},{"location":"Developers/Javascript Client Examples/#loading-flight-plan-using-javascript","text":"","title":"Loading Flight Plan Using JavaScript"},{"location":"Developers/Javascript Client Examples/#used-code","text":"<div id='example'> <div id='example_button'> </div> </div> let plan = { 'callsign': 'THYTST', 'departure': 'LTBA', 'destination': 'LTFM', 'route': 'LTBA LTFM' } let planOptions = { 'buttons': [ { to: 'example_button', text: 'Load Plan' } ] } let planClient = new fsfpl.Plan(plan, planOptions)","title":"Used Code"},{"location":"Developers/Javascript Client Examples/#result","text":"Button on this div is automatically generated with given options. Clicking it will load the flight in the example code. let plan = { 'callsign': 'THYTST', 'departure': 'LTBA', 'destination': 'LTFM', 'route': 'LTBA LTFM' } let planOptions = { 'buttons': [ { to: 'example_button', text: 'Load Plan' } ] } let planClient = new fsfpl.Plan(plan, planOptions) // planClient.send()","title":"Result"},{"location":"Developers/Javascript Client Examples/#pulling-data-from-existing-dom-structure","text":"","title":"Pulling Data from Existing DOM Structure"},{"location":"Developers/Javascript Client Examples/#turkish-virtual-departures-page","text":"Using FSFPLink.collector we can pull data from DOM.","title":"Turkish Virtual Departures Page"},{"location":"Developers/Javascript Client Examples/#used-code_1","text":"const link = new fsfpl.FSFPLink() function collectTv() { return new Promise((resolve, reject) => { /* * This is the important part. Rest is async mumbo jumbo */ link.collect({ 'route': { selector: '#route1', attribute: 'innerHTML' }, 'flight_code': { selector: '#flcode', attribute: 'innerHTML' }, 'departure': { selector: '#departure', attribute: 'innerHTML' }, 'destination': { selector: '#destination', attribute: 'innerHTML' }, 'alternate': { selector: '#alternate', attribute: 'innerHTML' }, 'callsign': { selector: '#callsign', attribute: 'innerHTML' }, 'block_time': { selector: '#time', attribute: 'innerHTML' }, 'aircraft': { selector: 'input[name=\"aircraft\"]:checked', attribute: 'value' }, 'cruise_altitude': { selector: 'input[name=\"cruise-altitude\"]:checked', attribute: 'value' } }).then(result => { document.getElementById('test-1-result').innerHTML = JSON.stringify(result, null, 2) console.log(result) resolve(result) /* * We would normally call 'send' here with result. * link.send(result) * * I am returning a promise instead for example purposes. */ }) /* * End of async mumbo jumbo */ }) } function sendTv(caller) { let options = { caller: caller } collectTv().then(result => { link.send(result, options) }) }","title":"Used Code"},{"location":"Developers/Javascript Client Examples/#example-dom","text":"Following HTML example is a copy of Turkish Virtual's Departure Page. Turkish Virtual Dispatch Service LTFM - ISTANBUL NEW AIRPORT / UKDE - MOKRAYA METAR and TAF Information Departure : LTFM - ISTANBUL NEW AIRPORT (Click to see airport details) METAR LTFM 142050Z 24010KT 9999 SCT035 BKN100 17/05 Q1012 NOSIG TAF No TAF available for LTFM. Please check PILOT CENTRE for Charts and Sceneries Destination : UKDE - MOKRAYA (Click to see airport details) METAR UKDE 141500Z 16006MPS 120V210 CAVOK 17/M00 Q1006 R20L/090070 NOSIG TAF 2019/12/20 16:09 TAF AMD TAF AMD UKDE 201606Z 2016/2124 09003MPS 0100 FZFG VV001 TXM01/2016Z TNM03/2124Z TEMPO 2018/2021 1000 BR OVC003 Please check PILOT CENTRE for Charts and Sceneries Alternate : UKOH - KHERSON INTL (Click to see airport details) METAR TAF No TAF available for UKOH. Please check PILOT CENTRE for Charts and Sceneries ROUTE INFORMATION Route 1 : MAKOL N617 OSDOR L743 KOSAK Y179 RAPUL L140 KH N604 DITIX Route 2 : Not Available Route of The Destination Turkish Virtual \u2022 Information Services (This is a Scheduled Flight) OTHER INFORMATION Flight Code THY 1469 Callsign THY 2RD Aircraft A319 A320 Flight Levels FL330 FL350 Distance 498 nm Flight Time 1:40 Flight Type International Flight Ticket Price 1400 Departure Time 1140 (z) Please check PILOT CENTRE for Charts and Sceneries Not for real aviation ! .radio-toolbar input[type=\"radio\"] { display: none; } .radio-toolbar label { display: inline-block; background-color: #ddd; padding: 4px 11px; font-family: Arial; font-size: 16px; cursor: pointer; } .radio-toolbar input[type=\"radio\"]:checked+label { background-color: #bbb; }","title":"Example DOM"},{"location":"Developers/Javascript Client Examples/#result_1","text":"Collect Send const link = new fsfpl.Utility() function collectTv() { return new Promise((resolve, reject) => { /* * This is the important part. Rest is async mumbo jumbo */ link.collect({ 'route': { selector: '#route1', attribute: 'innerHTML' }, 'flight_code': { selector: '#flcode', attribute: 'innerHTML' }, 'departure': { selector: '#departure', attribute: 'innerHTML' }, 'destination': { selector: '#destination', attribute: 'innerHTML' }, 'alternate': { selector: '#alternate', attribute: 'innerHTML' }, 'callsign': { selector: '#callsign', attribute: 'innerHTML' }, 'block_time': { selector: '#time', attribute: 'innerHTML' }, 'aircraft': { selector: 'input[name=\"aircraft\"]:checked', attribute: 'value' }, 'cruise_altitude': { selector: 'input[name=\"cruise-altitude\"]:checked', attribute: 'value' } }).then(result => { document.getElementById('test-1-result').innerHTML = JSON.stringify(result, null, 2) console.log(result) resolve(result) /* * We would normally call 'send' here with result. * link.send(result) * * I am returning a promise instead for example purposes. */ }) /* * End of async mumbo jumbo */ }) } function sendTv(caller) { let options = { caller: caller } collectTv().then(result => { link.send(result, options) }) }","title":"Result"},{"location":"Developers/Javascript Client Referance/","text":"Javascript Client Reference \uf0c1 Plan \uf0c1 class: fsfpl.Plan(plan, options) A flight plan interface. Parameters \uf0c1 plan \uf0c1 object Plan data, object, as defined in Server API. options \uf0c1 object optional Currently there are no specific options to load to this class. createButton (buttonOptions) \uf0c1 Append a button connected to Plan.send in to a DOM object. Parameters \uf0c1 buttonOptions \uf0c1 object Field Type Description to String ID of a DOM object to append to text String Inside text of the button send (options) \uf0c1 Send current flight plan to server. (desktop application) Parameters \uf0c1 options \uf0c1 object Field Type Description caller DOM Element a DOM element (like button) to disable during HTTP request. It gets activated after request is over. Utility \uf0c1 class: fsfpl.Utility() Utily class. Might be subject to change. collect (collectionMapping) \uf0c1 Accepts collectionMapping object. Keys should be equal to flight plan fields defined in Server API. Values can be in two formats. Returns collected data from DOM elements. Parameters \uf0c1 collectionMapping \uf0c1 Get result of a function call. \uf0c1 'func' field accepts a function. Function receives whole object as an argument. So you can use other fields in the object as you wish. 'block_time': { func: function, example: 'example' } Get values from DOM objects. \uf0c1 field description selector CSS selector. It will receive first DOM object with given CSS selector. attribute Which attribute to read from Special case: 'innerHTML' can be given as 'attribute', in this case innerHTML will be read eventhough it is not an attribute. { 'destination': { selector: '#my-div', attribute: 'innerHTML' }, 'departure': { selector: '#my-input', attribute: 'value' }, 'aircraft': { selector: 'input[name=\"aircraft\"]:checked', attribute: 'value' } } send (data, options): \uf0c1 Creates a flight plan using data, and sends it. Parameters \uf0c1 data \uf0c1 Flight plan data. Defined in server API. Check Plan.send() for more details. options \uf0c1 Flight plan send options. Check Plan.send() for more details.","title":"Javascript Client Reference"},{"location":"Developers/Javascript Client Referance/#javascript-client-reference","text":"","title":"Javascript Client Reference"},{"location":"Developers/Javascript Client Referance/#plan","text":"class: fsfpl.Plan(plan, options) A flight plan interface.","title":"Plan"},{"location":"Developers/Javascript Client Referance/#parameters","text":"","title":"Parameters"},{"location":"Developers/Javascript Client Referance/#plan_1","text":"object Plan data, object, as defined in Server API.","title":"plan"},{"location":"Developers/Javascript Client Referance/#options","text":"object optional Currently there are no specific options to load to this class.","title":"options"},{"location":"Developers/Javascript Client Referance/#createbutton-buttonoptions","text":"Append a button connected to Plan.send in to a DOM object.","title":"createButton (buttonOptions)"},{"location":"Developers/Javascript Client Referance/#parameters_1","text":"","title":"Parameters"},{"location":"Developers/Javascript Client Referance/#buttonoptions","text":"object Field Type Description to String ID of a DOM object to append to text String Inside text of the button","title":"buttonOptions"},{"location":"Developers/Javascript Client Referance/#send-options","text":"Send current flight plan to server. (desktop application)","title":"send (options)"},{"location":"Developers/Javascript Client Referance/#parameters_2","text":"","title":"Parameters"},{"location":"Developers/Javascript Client Referance/#options_1","text":"object Field Type Description caller DOM Element a DOM element (like button) to disable during HTTP request. It gets activated after request is over.","title":"options"},{"location":"Developers/Javascript Client Referance/#utility","text":"class: fsfpl.Utility() Utily class. Might be subject to change.","title":"Utility"},{"location":"Developers/Javascript Client Referance/#collect-collectionmapping","text":"Accepts collectionMapping object. Keys should be equal to flight plan fields defined in Server API. Values can be in two formats. Returns collected data from DOM elements.","title":"collect (collectionMapping)"},{"location":"Developers/Javascript Client Referance/#parameters_3","text":"","title":"Parameters"},{"location":"Developers/Javascript Client Referance/#collectionmapping","text":"","title":"collectionMapping"},{"location":"Developers/Javascript Client Referance/#get-result-of-a-function-call","text":"'func' field accepts a function. Function receives whole object as an argument. So you can use other fields in the object as you wish. 'block_time': { func: function, example: 'example' }","title":"Get result of a function call."},{"location":"Developers/Javascript Client Referance/#get-values-from-dom-objects","text":"field description selector CSS selector. It will receive first DOM object with given CSS selector. attribute Which attribute to read from Special case: 'innerHTML' can be given as 'attribute', in this case innerHTML will be read eventhough it is not an attribute. { 'destination': { selector: '#my-div', attribute: 'innerHTML' }, 'departure': { selector: '#my-input', attribute: 'value' }, 'aircraft': { selector: 'input[name=\"aircraft\"]:checked', attribute: 'value' } }","title":"Get values from DOM objects."},{"location":"Developers/Javascript Client Referance/#send-data-options","text":"Creates a flight plan using data, and sends it.","title":"send (data, options):"},{"location":"Developers/Javascript Client Referance/#parameters_4","text":"","title":"Parameters"},{"location":"Developers/Javascript Client Referance/#data","text":"Flight plan data. Defined in server API. Check Plan.send() for more details.","title":"data"},{"location":"Developers/Javascript Client Referance/#options_2","text":"Flight plan send options. Check Plan.send() for more details.","title":"options"},{"location":"Developers/Server API/","text":"Server API Referance \uf0c1 My New API window.onload = function () { // Begin Swagger UI call region const ui = SwaggerUIBundle({ url: \"/api/fsfplink.v1.yaml\", //Location of Open API spec in the repo dom_id: '#swagger-ui', deepLinking: true, presets: [ SwaggerUIBundle.presets.apis, SwaggerUIBundle.SwaggerUIStandalonePreset ], plugins: [ SwaggerUIBundle.plugins.DownloadUrl ], }) window.ui = ui }","title":"Server API Referance"},{"location":"Developers/Server API/#server-api-referance","text":"My New API window.onload = function () { // Begin Swagger UI call region const ui = SwaggerUIBundle({ url: \"/api/fsfplink.v1.yaml\", //Location of Open API spec in the repo dom_id: '#swagger-ui', deepLinking: true, presets: [ SwaggerUIBundle.presets.apis, SwaggerUIBundle.SwaggerUIStandalonePreset ], plugins: [ SwaggerUIBundle.plugins.DownloadUrl ], }) window.ui = ui }","title":"Server API Referance"}]}